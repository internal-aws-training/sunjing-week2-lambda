AWSTemplateFormatVersion: 2010-09-09
Description: CloudWatch trigger lambda regularly
Parameters:
  S3BucketName:
    Type: String
    Default: sj-dd-bucket

Resources:
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref S3BucketName
      AccessControl: PublicReadWrite

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: >
          const AWS = require("aws-sdk");
          const s3 = new AWS.S3();

          exports.handler = async (event, context) =>{
            console.log(JSON.stringify(event));

            const readParams = {
              Bucket: process.env.BUCKET_NAME,
              Key: "test.txt"
            };

            const data = await s3.getObject(readParams).promise();
            console.log(Buffer.from(data.Body).toString());
          };
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: "nodejs12.x"
      Timeout: 900
      Environment:
        Variables:
          BUCKET_NAME: !Ref S3Bucket

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: lambda.amazonaws.com
      Policies:
        - PolicyName: lambda-policy-log
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - arn:aws:logs:*:*:log-group:/aws/lambda/*:*
        - PolicyName: lambda-policy-s3
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub arn:aws:s3:::${S3BucketName}/*

  ScheduledRule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: "rate(1 minute)"
      State: "ENABLED"
      Targets:
        -
          Arn: !GetAtt LambdaFunction.Arn
          Id: 1

  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt ScheduledRule.Arn
