Parameters:
  S3BucketNameForLambdaCode:
    Type: String
    Default: lambda-code-hello-word
    Description: The s3 bucket which contain event lambda code
  S3BucketObjectKeyForEventLambdaCode:
    Type: String
    Default: hello-world-event.zip
    Description: The s3 bucket which contain lambda code
  S3BucketObjectKeyForApiLambdaCode:
    Type: String
    Default: hello-world-api.zip
    Description: The s3 bucket which contain api lambda code
  EventLambdaLogGroupName:
    Type: String
    Default: hello-world-lambda-log-group
    Description: The log group for event lambda
  ApiLambdaLogGroupName:
    Type: String
    Default: hello-world-api-lambda-log-group
    Description: The log group for api lambda

Resources:
  MyEventLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3BucketNameForLambdaCode
        S3Key: !Ref S3BucketObjectKeyForEventLambdaCode
      Handler: "index.handler"
      Role:  !GetAtt EventLambdaExecutionRole.Arn
      Runtime: "nodejs12.x"
      Timeout: 900
      Environment:
        Variables:
          TABLE_NAME: !Select [1, !Split ['/', !GetAtt MyDynamoDBTable.Arn]]
          REGION: !Ref AWS::Region

  EventLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: lambda.amazonaws.com
      Policies:
        - PolicyName: hello-world-lambda-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                Resource:
                  - arn:aws:logs:*:*:log-group:/aws/lambda/*:*
                  - !GetAtt MyDynamoDBTable.Arn

  EventLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: MyEventLambda
    Properties:
      LogGroupName: !Ref EventLambdaLogGroupName
      RetentionInDays: 30

  MyDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        -
          AttributeName: "UserId"
          AttributeType: "N"
        -
          AttributeName: "Label"
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: "UserId"
          KeyType: "HASH"
        -
          AttributeName: "Label"
          KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"

  MySNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
        -
          Endpoint: !GetAtt MyEventLambda.Arn
          Protocol: lambda
      TopicName: "NewUser"

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: sns.amazonaws.com
      SourceArn: !Ref MySNSTopic
      FunctionName: !Ref MyEventLambda

  MyApiLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3BucketNameForLambdaCode
        S3Key: !Ref S3BucketObjectKeyForApiLambdaCode
      Handler: "index.handler"
      Role:  !GetAtt ApiLambdaExecutionRole.Arn
      Runtime: "nodejs12.x"
      Timeout: 900
      Environment:
        Variables:
          TABLE_NAME: !Select [1, !Split ['/', !GetAtt MyDynamoDBTable.Arn]]
          REGION: !Ref AWS::Region

  ApiLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: lambda.amazonaws.com
      Policies:
        - PolicyName: hello-world-api-lambda-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - dynamodb:GetItem
                Resource:
                  - arn:aws:logs:*:*:log-group:/aws/lambda/*:*
                  - !GetAtt MyDynamoDBTable.Arn

  ApiLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: MyApiLambda
    Properties:
      LogGroupName: !Ref ApiLambdaLogGroupName
      RetentionInDays: 30

  MyRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: MyRestAPI
      Parameters:
        endpointConfigurationTypes: REGIONAL

  ApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref MyRestApi
      ParentId: !GetAtt MyRestApi.RootResourceId
      PathPart: user

  ApiGatewayResourceUser:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref MyRestApi
      ParentId: !Ref ApiGatewayResource
      PathPart: "{id+}"

  ApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      ResourceId: !Ref ApiGatewayResourceUser
      RestApiId: !Ref MyRestApi
      RequestParameters:
        method.request.path.id: true
        method.request.querystring.label: true
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !GetAtt MyApiLambda.Arn
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestParameters:
          integration.request.path.id: method.request.path.id
          integration.request.querystring.label: method.request.querystring.label
        RequestTemplates:
          application/json: !Join
            - ''
            -
              - "{"
              - "\"id\": $input.params('id'),"
              - "\"label\": \"$input.params('label')\""
              - "}"
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates: {"application/json": "$input.json('$.body')"}
          - StatusCode: 400
            SelectionPattern: ".*"
            ResponseTemplates: {"application/json": "$input.json('$.errorMessage')"}
      MethodResponses:
        - StatusCode: 200
        - StatusCode: 400

  lambdaApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt MyApiLambda.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub
              - arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/*
              - apiGateway: !Ref MyRestApi
