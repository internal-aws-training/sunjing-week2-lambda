AWSTemplateFormatVersion: 2010-09-09
Description: Lambda invoke another lambda
Parameters:
  LambdaOneName:
    Type: String
    Default: lambda-one
  LambdaTwoName:
    Type: String
    Default: lambda-two
  LambdaOneLogGroupName:
    Type: String
    Default: lambda-one-log-group
  LambdaTwoLogGroupName:
    Type: String
    Default: lambda-two-log-group

Resources:
  LambdaOneFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: >
          const AWS = require("aws-sdk");
          const lambda = new AWS.Lambda({region: "ap-southeast-2"});

          exports.handler = async (event, context) =>{
            console.log(JSON.stringify(event));
            console.log("I'm the one");

            return await lambda.invoke({
              FunctionName: process.env.FUNCTION_NAME,
              Payload: JSON.stringify({testKey: "test value"})
            }).promise();

          };
      Handler: index.handler
      Role: !GetAtt LambdaOneExecutionRole.Arn
      Runtime: "nodejs12.x"
      Timeout: 900
      Environment:
        Variables:
          FUNCTION_NAME: !Ref LambdaTwoFunction

  LambdaTwoFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: >
          exports.handler = async (event, context) =>{
            console.log("Hi, I'm the two");
            console.log(JSON.stringify(event));
          };
      Handler: index.handler
      Role: !GetAtt LambdaTwoExecutionRole.Arn
      Runtime: "nodejs12.x"
      Timeout: 900

  LambdaOneExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: lambda.amazonaws.com
      Policies:
        - PolicyName: lambda-policy-log
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - arn:aws:logs:*:*:log-group:/aws/lambda/*:*
        - PolicyName: lambda-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                  - lambda:InvokeAsync
                Resource:
                  - !Sub arn:aws:lambda:::function:${LambdaTwoFunction}

  LambdaTwoExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: lambda.amazonaws.com
      Policies:
        - PolicyName: lambda-policy-log
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - arn:aws:logs:*:*:log-group:/aws/lambda/*:*

  LambdaOneLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: LambdaOneFunction
    Properties:
      LogGroupName: !Ref LambdaOneLogGroupName
      RetentionInDays: 30

  LambdaTwoLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: LambdaTwoFunction
    Properties:
      LogGroupName: !Ref LambdaTwoLogGroupName
      RetentionInDays: 30
